(:require [clojurewerkz.welle.core :as riak])
(load-file "src/clojure-rest-example/riak.clj")
(load-file "src/clojure_rest_example/riak.clj")
(:require [clojurewerkz.welle.core :as wc])
(:import [clojurewerkz.welle.core :as wc])
(run-tests 'clojure-rest-example.test.datomic)
(:use clojure.test)
(:import clojure.test)
(:import 'clojure.test)
(run-tests 'clojure-rest-example.test.datomic)
(run-all-tests)
(load-file "src/clojure-rest-example.datomic-test.clj")
(load-file "src/clojure-rest-example/datomic-test.clj")
(load-file "src/clojure_rest_example/datomic-test.clj")
(load-file "src/clojure-rest-example/datomic-test.clj")
(load-file "src/clojure_rest_example/datomic-test.clj")
(run tests)
(run-tests)
(:require clojure.test)
(:use clojure.test)
(use 'clojure.test)
(run-tests)
(run-tests 'clojure-rest-example.test.datomic)
(load-file "test/clojure_rest_example/test/datomic.clj")
(doc type)
(load-file "src/clojure_rest_example/datomic.clj")
(dbinit)
(uuid)
( (:use clojure.test
        clojure-rest-example.datomic))
(:use clojure-rest-example.datomic)
(load-file "src/clojure_rest_example/datomic.clj")
(run-query)
(use '[datomic.api :only [q db] :as d])
(defn dbinit [](
   (def uri "datomic:free://localhost:4334//customer")
  (d/create-database uri)
  (def conn (d/connect uri))
  (def schema-file (read-string (slurp "data/datomic_schema.dtm")))
  @(d/transact conn schema-file) 
))
(dbinit)
(defn dbinit [](
   (def uri "datomic:free://localhost:4334//customer")
  (d/create-database uri)
  (def conn (d/connect uri))
  (def schema-file (read-string (slurp "data/datomic_schema.dtm")))
  @(d/transact conn schema-file) 
  nil
))
(dbinit)
(defn dbinit [](
   (def uri "datomic:free://localhost:4334//customer")
  (d/create-database uri)
  (def conn (d/connect uri))
))
(dbinit)
(defn dbinit [](
   (def uri "datomic:free://localhost:4334//customer")
))
(dbinit)
(defn dbinit [](
   (let [uri "datomic:free://localhost:4334//customer"])
))
(dbinit)
dbinit
(nil? dbinit)
(println dbinit)
(dbinit)
(nil)
(println dbinit)
(def x dbinit)
(println x)
(dbinit)
(defn dbinit [](
   (let [uri "datomic:free://localhost:4334//customer"])
   22
))
(dbinit)
(println "blah")
(defn dbinit [](
   (let [uri "datomic:free://localhost:4334//customer"]
     (nil? url)
   )
))
(dbinit)
(ns test)
(ns testy)
(defn- foo []
05
         "World!")
(defn foo [] "World!")
(foo)
(defn foo [] (def v "World!"))
(foo)
(defn foo [] (def v "World!") v)
(foo)
(defn bar []
 (str "Hello " (foo)))
(bar)
(defn dbinit []( (def v "datomic:free://localhost:4334//customer") c))
(defn dbinit []( (def v "datomic:free://localhost:4334//customer") v))
(dbinit)
(defn dbinit [](def v "datomic:free://localhost:4334//customer") v)
(dbinit)
(let [conn "ABC123"])
(println conn)
(let [conn "ABC123"] (println conn))
(let [conn "ABC123"] println conn)
(let [conn "ABC123"] (println conn) )
(let [conn "ABC123"] (println conn) (conn))
(let [conn "ABC123"] (println conn) '(conn))
(defn my-func []  (fn [conn] (conn)) "string"  )
(my-func)
(defn my-func []  (fn [conn] (conn)) (first "string")  )
(my-func)
(defn my-func []  (fn [conn] (conn)) (time)  )
(defn my-func []  (fn [conn] (conn)) (date-time)  )
(defn my-func []  (fn [conn] (conn)) (str (date-time))  )
(defn my-func []  (fn [conn] (conn)) (str (date-time))  )(defn now [] (new java.util.Date))
(defn now [] (new java.util.Date))
(now)
(defn my-func []  ((fn [conn] (conn)) (str (now)))  )
(my-func)
(defn my-func []  (fn [] "fn1")  )
(myfunc)
(my-func)
my-func
(my-func)
((my-func))
(defn my-func []  ( (fn [val] (str val) "poop")  )
(defn my-func []  ( (fn [val] (str val) "poop")  ))
(my-func)
(defn my-func []  ( (fn [val] (str val)) "poop"  ))
(my-func)
(defn my-func []  ( (fn [val] (str val)) now  ))
(my-func)
(defn my-func []  ( (fn [val] val) now  ))
(my-func)
((my-func))
(def my-now (now))
(my-now)
((my-now))
(def my-now (str now))
((my-now))
(my-now)
(now)
(str now)
'(my-now)
(my-now)
(println my-now)
(def my-now (now))
(println my-now)
(def my-now (now))
(println my-now)
(def my-now [func] (func now))
(defn my-now [func] (func now))
(my-now str)
(my-now first)
(my-now println)
(defn my-now [func] (func now))
(my-now println)
(defn my-now [func] (now))
(my-now println)
