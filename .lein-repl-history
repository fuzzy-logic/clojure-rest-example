(:require [clojurewerkz.welle.core :as riak])
(load-file "src/clojure-rest-example/riak.clj")
(load-file "src/clojure_rest_example/riak.clj")
(:require [clojurewerkz.welle.core :as wc])
(:import [clojurewerkz.welle.core :as wc])
(run-tests 'clojure-rest-example.test.datomic)
(:use clojure.test)
(:import clojure.test)
(:import 'clojure.test)
(run-tests 'clojure-rest-example.test.datomic)
(run-all-tests)
(load-file "src/clojure-rest-example.datomic-test.clj")
(load-file "src/clojure-rest-example/datomic-test.clj")
(load-file "src/clojure_rest_example/datomic-test.clj")
(load-file "src/clojure-rest-example/datomic-test.clj")
(load-file "src/clojure_rest_example/datomic-test.clj")
(run tests)
(run-tests)
(:require clojure.test)
(:use clojure.test)
(use 'clojure.test)
(run-tests)
(run-tests 'clojure-rest-example.test.datomic)
(load-file "test/clojure_rest_example/test/datomic.clj")
(doc type)
(load-file "src/clojure_rest_example/datomic.clj")
(dbinit)
(uuid)
( (:use clojure.test
        clojure-rest-example.datomic))
(:use clojure-rest-example.datomic)
(load-file "src/clojure_rest_example/datomic.clj")
(run-query)
(use '[datomic.api :only [q db] :as d])
(defn dbinit [](
   (def uri "datomic:free://localhost:4334//customer")
  (d/create-database uri)
  (def conn (d/connect uri))
  (def schema-file (read-string (slurp "data/datomic_schema.dtm")))
  @(d/transact conn schema-file) 
))
(dbinit)
(defn dbinit [](
   (def uri "datomic:free://localhost:4334//customer")
  (d/create-database uri)
  (def conn (d/connect uri))
  (def schema-file (read-string (slurp "data/datomic_schema.dtm")))
  @(d/transact conn schema-file) 
  nil
))
(dbinit)
(defn dbinit [](
   (def uri "datomic:free://localhost:4334//customer")
  (d/create-database uri)
  (def conn (d/connect uri))
))
(dbinit)
(defn dbinit [](
   (def uri "datomic:free://localhost:4334//customer")
))
(dbinit)
(defn dbinit [](
   (let [uri "datomic:free://localhost:4334//customer"])
))
(dbinit)
dbinit
(nil? dbinit)
(println dbinit)
(dbinit)
(nil)
(println dbinit)
(def x dbinit)
(println x)
(dbinit)
(defn dbinit [](
   (let [uri "datomic:free://localhost:4334//customer"])
   22
))
(dbinit)
(println "blah")
(defn dbinit [](
   (let [uri "datomic:free://localhost:4334//customer"]
     (nil? url)
   )
))
(dbinit)
(ns test)
(ns testy)
(defn- foo []
05
         "World!")
(defn foo [] "World!")
(foo)
(defn foo [] (def v "World!"))
(foo)
(defn foo [] (def v "World!") v)
(foo)
(defn bar []
 (str "Hello " (foo)))
(bar)
(defn dbinit []( (def v "datomic:free://localhost:4334//customer") c))
(defn dbinit []( (def v "datomic:free://localhost:4334//customer") v))
(dbinit)
(defn dbinit [](def v "datomic:free://localhost:4334//customer") v)
(dbinit)
(let [conn "ABC123"])
(println conn)
(let [conn "ABC123"] (println conn))
(let [conn "ABC123"] println conn)
(let [conn "ABC123"] (println conn) )
(let [conn "ABC123"] (println conn) (conn))
(let [conn "ABC123"] (println conn) '(conn))
(defn my-func []  (fn [conn] (conn)) "string"  )
(my-func)
(defn my-func []  (fn [conn] (conn)) (first "string")  )
(my-func)
(defn my-func []  (fn [conn] (conn)) (time)  )
(defn my-func []  (fn [conn] (conn)) (date-time)  )
(defn my-func []  (fn [conn] (conn)) (str (date-time))  )
(defn my-func []  (fn [conn] (conn)) (str (date-time))  )(defn now [] (new java.util.Date))
(defn now [] (new java.util.Date))
(now)
(defn my-func []  ((fn [conn] (conn)) (str (now)))  )
(my-func)
(defn my-func []  (fn [] "fn1")  )
(myfunc)
(my-func)
my-func
(my-func)
((my-func))
(defn my-func []  ( (fn [val] (str val) "poop")  )
(defn my-func []  ( (fn [val] (str val) "poop")  ))
(my-func)
(defn my-func []  ( (fn [val] (str val)) "poop"  ))
(my-func)
(defn my-func []  ( (fn [val] (str val)) now  ))
(my-func)
(defn my-func []  ( (fn [val] val) now  ))
(my-func)
((my-func))
(def my-now (now))
(my-now)
((my-now))
(def my-now (str now))
((my-now))
(my-now)
(now)
(str now)
'(my-now)
(my-now)
(println my-now)
(def my-now (now))
(println my-now)
(def my-now (now))
(println my-now)
(def my-now [func] (func now))
(defn my-now [func] (func now))
(my-now str)
(my-now first)
(my-now println)
(defn my-now [func] (func now))
(my-now println)
(defn my-now [func] (now))
(my-now println)
(doc second)
(doc info)
(doc meta)
quit
(doc meta)
(doc cons)
(doc fffirst)
(doc ffirst)
(doc second)
{:a (meta doc)}
{:a (meta first)}
(use '[datomic.api :only [q db] :as d])
#db/id[:db.part/user (dec 20)]
#blah[1 2 3]
#first[1 2 3]
#clojure/first[1 2 3]
#db/id[1 2 3]
#db/id[1 2 3 4 5]
(def #myfunc (fn [] (println "hellow")))
 #db/id[:db.part/db]
 #db/id[:db.part/db first]
(doc macrodef)
(macrodef #myfunc)
(macrodef #myfunc())
(macrodef #myfunc[]())
(macrodef #myfunc []())
(defmacro #myfunc [] (println "hellow") )
(defmacro #myfunc [] '(println "hellow") )
(#f)
#f
)
))
((
(doc test)
(doc first)
)
(#f)
quit
(#f)
(doc first)
(defmacro myfunc [] '(println "hellow"))
(myfunc)
(defmacro #myfunc [] '(println "hellow"))
(#myfunc)
(#myfunc))
(#myfunc()
)
(doc db/id)
(doc #db/id)
(doc #db/id[])
(doc #db/id)
(doc db/id)
(use '[datomic.api :only [q db] :as d])
(doc db/id)
(doc d/id)
(doc d/add)
(doc d/transact)
(#db/id)
(#db/id[])
#db/id[:db.part/user customerid])
#db/id[:db.part/user -1])
#db/id[:db.part/user -1]
#db/idd[:db.part/user -1]
#db/idk[:db.part/user -1]
#db/i[:db.part/user -1]
#db/id[:db.part/user -1]
#db/id[:db.part/user #(first [-1 -2 -3])]
(map first #{[1] [2] [3]})
(map ffirst #{[1] [2] [3]})
(map thrid #{[1] [2] [3]})
(map third #{[1] [2] [3]})
(map second #{[1] [2] [3]})
(map :recording/search_term ({:recording/search_term Eastenders, :recording/skyid e7cf8f94-260c-4ac6-825b-d7f2f628415b, :db/id 17592186046237} {:recording/search_term Game of Thrones, :recording/skyid e7cf8f94-260c-4ac6-825b-d7f2f628415b, :db/id 17592186046229} {:recording/search_term Breaking Bad, :recording/skyid e7cf8f94-260c-4ac6-825b-d7f2f628415b, :db/id 17592186046228}))
(map :recording/search_term '({:recording/search_term Eastenders, :recording/skyid e7cf8f94-260c-4ac6-825b-d7f2f628415b, :db/id 17592186046237} {:recording/search_term Game of Thrones, :recording/skyid e7cf8f94-260c-4ac6-825b-d7f2f628415b, :db/id 17592186046229} {:recording/search_term Breaking Bad, :recording/skyid e7cf8f94-260c-4ac6-825b-d7f2f628415b, :db/id 17592186046228}))
(map :a '({:a 11 :b 12} {:a 21 :b 22} {:a 31 :b 32}))
(doc some)
(some "a" ["a" "b" "c"])
(some #{"a"} ["a" "b" "c"])
(some #{"a"} ["d" "b" "c"])
(doc some)
(some #{nil} ["a" "b" "c"])
(some #{nil} ["a" "b" "c" nil])
(defn lazy-contains? [collection key]
  (some #{key} collection)
)
(lazy-contains? [1 2 3] nil)
(lazy-contains? [1 2 nil] nil)
(doc contains?)
(def uri "datomic:mem://testdb")
(d/create-database uri)
 (d/connect uri)
(ns user   (:use [datomic.api :as d]))
(:use [datomic.api :as d])
(d/create-database "datomic:mem://hello")
 (d/connect "datomic:mem://hello")
(def conn (d/connect "datomic:mem://hello")  )
@(d/transact connection "{:db/id #db/id[:db.part/db]")
  :db/ident :customer/skyid
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/fulltext true
  :db/doc "customer's skyid"
@(d/transact connection "{:db/id #db/id[:db.part/db]}")
@(d/transact conn "{:db/id #db/id[:db.part/db]}")
@(d/transact conn [{:db/id #db/id[:db.part/db]}])
(count ({:recording/search_term Eastenders, :recording/skyid 5126f634-5546-478d-a580-7122c4a11823, :db/id 17592186045428}))
(count '({:recording/search_term Eastenders, :recording/skyid 5126f634-5546-478d-a580-7122c4a11823, :db/id 17592186045428}))
(count '({:recording/search_term Eastenders, :recording/skyid 5126f634-5546-478d-a580-7122c4a11823, :db/id 17592186045428})))
(count '({:recording/search_term Eastenders, :recording/skyid 5126f634-5546-478d-a580-7122c4a11823, :db/id 17592186045428}))
(count {:recording/search_term Eastenders, :recording/skyid 5126f634-5546-478d-a580-7122c4a11823, :db/id 17592186045428})
(count {:recording/search_term "Eastenders", :recording/skyid "5126f634-5546-478d-a580-7122c4a11823", :db/id "17592186045428"})
(count (keys {:recording/search_term "Eastenders", :recording/skyid "5126f634-5546-478d-a580-7122c4a11823", :db/id "17592186045428"}))
(count (keys '({:recording/search_term "Eastenders", :recording/skyid "222266df-692b-4ce7-8c2b-11304cbdf83a", :db/id "17592186045428"})))
(count (keys [{:recording/search_term "Eastenders", :recording/skyid "222266df-692b-4ce7-8c2b-11304cbdf83a", :db/id "17592186045428"}]))
(count (keys (first [{:recording/search_term "Eastenders", :recording/skyid "222266df-692b-4ce7-8c2b-11304cbdf83a", :db/id "17592186045428"}])))
(count {:recording/search_term Eastenders, :recording/skyid e3214b68-2c1f-46ab-a578-c069dadc0cc6, :db/id 17592186045428})
(count {:recording/search_term "Eastenders", :recording/skyid "e3214b68-2c1f-46ab-a578-c069dadc0cc6", :db/id "17592186045428"})
(count {:recording/search_term "Eastenders", :recording/skyid "e3214b68-2c1f-46ab-a578-c069dadc0cc6", :db/id "17592186045428", :g 1})
